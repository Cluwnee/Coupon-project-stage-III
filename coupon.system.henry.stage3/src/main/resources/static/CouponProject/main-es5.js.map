{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/admin/admin.component.ts","webpack:///src/app/components/admin/admin.component.html","webpack:///src/app/components/company/company.component.ts","webpack:///src/app/components/company/company.component.html","webpack:///src/app/components/customer/customer.component.ts","webpack:///src/app/components/customer/customer.component.html","webpack:///src/app/components/homepage/homepage.component.ts","webpack:///src/app/components/homepage/homepage.component.html","webpack:///src/app/components/login/login.component.ts","webpack:///src/app/components/login/login.component.html","webpack:///src/app/model/company.ts","webpack:///src/app/model/coupon.ts","webpack:///src/app/model/customer.ts","webpack:///src/app/service/admin.service.ts","webpack:///src/app/service/company.service.ts","webpack:///src/app/service/coupon-load.service.ts","webpack:///src/app/service/customer.service.ts","webpack:///src/app/service/login.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","redirectTo","pathMatch","AppRoutingModule","forRoot","imports","AppComponent","title","userType","sessionStorage","getItem","admin","company","customer","checkUser","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","AdminComponent","adminService","fb","snack","updateCus","updateCom","createCompanyForm","group","name","required","companyEmail","email","companyPassword","maxLength","createCustomerForm","fName","lName","customerEmail","customerPassword","findOneCom","companyId","findOneCus","customerId","updateCompanyForm","nameUpdate","companyUpEmail","companyUpPassword","updateCustomerForm","fNameUpdate","lNameUpdate","customerUpEmail","customerUpPassword","getAllCompanies","token","subscribe","companies","getAllCustomers","customers","controls","value","createCompany","open","duration","ngOnInit","err","console","log","createCustomer","setValue","updateCompany","firstName","lastName","updateCustomer","deleteCompany","response","deleteCustomer","getOneCompany","oneCompany","getOneCustomer","oneCustomer","addNewCompany","addNewCustomer","CompanyComponent","companyService","updateCou","createCouponForm","category","description","startDate","endDate","amount","min","price","image","updateCouponForm","categoryUp","titleUp","descriptionUp","startDateUp","endDateUp","amountUp","priceUp","imageUp","findOneForm","couponId","categoryFilter","priceFilter","maxPrice","categoryType","findAllCoupons","coupons","coupon","createCoupon","updateCoupon","result","deleteCoupon","findOneCoupon","oneCoupon","findAllCouponsByPrice","filterCoupons","findAllCouponsByCategory","companyDetails","showDetails","getOneCoupon","CustomerComponent","customerService","findCustomerCoupons","findCustomerCouponsByPrice","findCustomerCouponsByCategory","customerDetails","HomepageComponent","coupService","loginService","getAllCoupons","toBuyCoupon","purchaseCoupon","LoginComponent","loginForm","password","clientType","login","tokenFromServer","setItem","window","location","reload","logout","res","removeItem","Company","Coupon","Customer","AdminService","client","post","put","responseType","get","providedIn","CompanyService","CouponLoaderService","CustomerService","LoginService","environment","production","bootstrapModule","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomepageComponent } from './components/homepage/homepage.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { AdminComponent } from './components/admin/admin.component';\nimport { CompanyComponent } from './components/company/company.component';\nimport { CustomerComponent } from './components/customer/customer.component';\n\n\nconst routes: Routes = [\n  {path: \"home\", component: HomepageComponent},\n  {path: \"login\", component: LoginComponent},\n  {path: \"admin\", component: AdminComponent},\n  {path: \"company\", component: CompanyComponent},\n  {path: \"customer\", component: CustomerComponent},\n  {path: \"\", redirectTo: \"home\", pathMatch: \"full\"}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'CouponProject';\n\n  userType: string = sessionStorage.getItem('userType');\n  admin: boolean = false;\n  company: boolean = false;\n  customer: boolean = false;\n\n  constructor(){}\n\n  ngOnInit(): void {\n    this.checkUser()\n  }\n\n  public checkUser() {\n    this.userType = sessionStorage.getItem('userType')\n    switch (this.userType) {\n      case 'admin':\n        this.admin = true\n        break;\n\n      case 'company':\n        this.company = true\n        break;\n\n      case 'customer':\n        this.customer = true\n        break;\n\n      default:\n        this.admin = false;\n        this.company = false;\n        this.customer = false;\n        break;\n    }\n  }\n\n}\n","<div>\n\n  <mat-toolbar color=\"primary\">\n\n    <mat-icon>shopping_cart</mat-icon> &nbsp;Scam Emporium\n    &nbsp;&nbsp;<a routerLink=\"home\">Coupons</a>\n    &nbsp;&nbsp;<a routerLink=\"admin\" *ngIf=\"admin === true\">Admin Controls</a>\n    &nbsp;&nbsp;<a routerLink=\"company\" *ngIf=\"company === true\">Company Controls</a>\n    &nbsp;&nbsp;<a routerLink=\"customer\" *ngIf=\"customer === true\">Customer Controls</a>\n    <span class=\"toolbar-fill\"></span>\n\n    <mat-menu #appMenu=\"matMenu\">\n      <a routerLink=\"login\" mat-menu-item>Login / Logout</a>\n    </mat-menu>\n\n    <button mat-icon-button [matMenuTriggerFor]=\"appMenu\">\n      <mat-icon>login</mat-icon>\n    </button>\n\n  </mat-toolbar>\n\n  <main>\n\n    <router-outlet></router-outlet>\n    \n  </main>\n\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HttpClientModule } from '@angular/common/http';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport { MatTableModule } from '@angular/material/table';\nimport { HomepageComponent } from './components/homepage/homepage.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { CompanyComponent } from './components/company/company.component';\nimport { CustomerComponent } from './components/customer/customer.component';\nimport { AdminComponent } from './components/admin/admin.component';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomepageComponent,\n    LoginComponent,\n    CompanyComponent,\n    CustomerComponent,\n    AdminComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    MatToolbarModule,\n    MatMenuModule,\n    MatButtonModule,\n    MatIconModule,\n    MatInputModule,\n    MatFormFieldModule,\n    ReactiveFormsModule,\n    FormsModule,\n    MatTableModule,\n    MatSnackBarModule,\n    MatSelectModule,\n    MatSlideToggleModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { AdminService } from 'src/app/service/admin.service';\nimport { Company } from 'src/app/model/company';\nimport { Customer } from 'src/app/model/customer';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.css']\n})\nexport class AdminComponent implements OnInit {\n\n  // OUR FORMS\n  createCompanyForm: FormGroup;\n  createCustomerForm: FormGroup;\n  updateCompanyForm: FormGroup;\n  updateCustomerForm: FormGroup;\n  findOneCus: FormGroup;\n  findOneCom: FormGroup;\n\n  // OBJECTS WE USE\n  company: Company;\n  customer: Customer;\n  oneCompany: Company;\n  oneCustomer: Customer;\n\n  // USED FOR GENERATING ALL CUSTOMERS + COMPANIES\n  companies: Company[];\n  customers: Customer[];\n\n  // BOOLEANS TO OPEN AN UPDATE WINDOW\n  updateCus: Boolean = false;\n  updateCom: Boolean = false;\n\n  constructor(private adminService:AdminService, private fb:FormBuilder, private snack:MatSnackBar) { }\n\n  ngOnInit(): void {\n    // COMPANY CREATION\n    this.createCompanyForm = this.fb.group({\n      name: ['', Validators.required],\n      companyEmail: ['', [Validators.required, Validators.email]],\n      companyPassword: ['', [Validators.required, Validators.maxLength(12)]]\n    });\n\n    // CUSTOMER CREATION\n    this.createCustomerForm = this.fb.group({\n      fName: ['', Validators.required],\n      lName: ['', Validators.required],\n      customerEmail: ['', [Validators.required, Validators.email]],\n      customerPassword: ['', [Validators.required, Validators.maxLength(12)]]\n    });\n\n    // FORM TO FIND A SINGLE COMPANY OR CUSTOMER BASED ON ID - GET ID FROM FORM\n    this.findOneCom = this.fb.group({\n      companyId: ['', Validators.required]\n    });\n\n    this.findOneCus = this.fb.group({\n      customerId: ['', Validators.required]\n    });\n\n    // FORM TO UPDATE COMPANY\n    this.updateCompanyForm = this.fb.group({\n      nameUpdate: ['', Validators.required],\n      companyUpEmail: ['' , [Validators.required, Validators.email]],\n      companyUpPassword: ['' , [Validators.required, Validators.maxLength(12)]]\n    });\n\n    // FORM TO UPDATE CUSTOMER\n    this.updateCustomerForm = this.fb.group({\n      fNameUpdate: ['', Validators.required],\n      lNameUpdate: ['', Validators.required],\n      customerUpEmail: ['', [Validators.required, Validators.email]],\n      customerUpPassword: ['', [Validators.required, Validators.maxLength(12)]]\n    });\n\n    // GET ALL COMPANIES TO SHOW THE ADMIN ON LOAD\n    this.adminService.getAllCompanies(sessionStorage.token).subscribe((companies)=>{\n      this.companies = companies;\n    });\n\n    // GET ALL CUSTOMER TO SHOW THE ADMIN ON LOAD\n    this.adminService.getAllCustomers(sessionStorage.token).subscribe((customers)=>{\n      this.customers = customers;\n    });\n\n  }\n\n  // COPANY CREATION - RECEIVE DETAILS FROM CREATE COMPANY FORM\n  public addNewCompany() {\n    const company:Company = new Company(0, this.createCompanyForm.controls['name'].value, this.createCompanyForm.controls['companyEmail'].value, this.createCompanyForm.controls['companyPassword'].value);\n    this.adminService.createCompany(sessionStorage.token, company).subscribe( (company)=>{\n      this.snack.open(\"Company added sucessfully, ID: \" + company.companyId, \"\", {duration:2000})\n      this.ngOnInit();\n    }, (err)=>{\n      console.log(err)\n      this.snack.open(err, \"\", {duration:2000})\n    });\n  }\n\n  // CUSTOMER CREATION - RECEIVE DETAILS FROM CREATE CUSTOMER FORM\n  public addNewCustomer() {\n    const customer:Customer = new Customer(0, this.createCustomerForm.controls['fName'].value, this.createCustomerForm.controls['lName'].value, this.createCustomerForm.controls['customerEmail'].value, this.createCustomerForm.controls['customerPassword'].value);\n    this.adminService.createCustomer(sessionStorage.token, customer).subscribe( (customer)=>{\n      this.snack.open(\"Customer added sucessfully, ID: \" + customer.customerId, \"\", {duration:2000})\n      this.ngOnInit();\n    }, (err)=>{\n      console.log(err)\n      this.snack.open(err, \"\", {duration:2000})\n    });\n  }\n\n  // SEND COMPANY TO UPDATE - SEND WITH COMPANY DEFAULT VALUES THEN CHANGE WHAT WE NEED WHILE SAVING THE REST AS IS\n  public updateComOpen(company:Company) {\n    this.updateCom = true; // OPEN UPDATE FORM\n    this.company = company;\n    this.updateCompanyForm.controls['nameUpdate'].setValue(company.name);\n    this.updateCompanyForm.controls['companyUpEmail'].setValue(company.companyEmail);\n    this.updateCompanyForm.controls['companyUpPassword'].setValue(company.companyPassword);\n  }\n\n   // CANCEL BUTTON TO CLOSE UPDATE FORM WITHOUT UPDATING\n   public updateComClose() {\n    this.updateCom = false;\n  }\n\n  // ACTUAL UPDATE + FORM TO CHANGE WHAT WE NEED TO UPDATE - WHAT WE DONT CHANGE KEEPS DEFAULT VALUES ^^^\n  public updateCompany() {\n    this.company.name = this.updateCompanyForm.controls['nameUpdate'].value;\n    this.company.companyEmail = this.updateCompanyForm.controls['companyUpEmail'].value;\n    this.company.companyPassword = this.updateCompanyForm.controls['companyUpPassword'].value;\n    this.adminService.updateCompany(sessionStorage.token, this.company).subscribe((company)=>{\n      this.snack.open(\"Company updated successfully\", \"\", {duration:2000})\n      this.ngOnInit();\n      this.updateCom = false;\n    }, (err)=>{\n      console.log(err)\n      this.snack.open(err, \"\", {duration:2000})\n    });\n  }\n\n  // SEND CUSTOMER TO UPDATE - SEND WITH CUSTOMER DEFAULT VALUES THEN CHANGE WHAT WE NEED WHILE SAVING THE REST AS IS\n  public updateCusOpen(customer:Customer) {\n    this.updateCus = true; // OPEN UPDATE FORM\n    this.customer = customer;\n    this.updateCustomerForm.controls['fNameUpdate'].setValue(customer.firstName);\n    this.updateCustomerForm.controls['lNameUpdate'].setValue(customer.lastName);\n    this.updateCustomerForm.controls['customerUpEmail'].setValue(customer.customerEmail);\n    this.updateCustomerForm.controls['customerUpPassword'].setValue(customer.customerPassword);\n  }\n\n  // CANCEL BUTTON TO CLOSE UPDATE FORM WITHOUT UPDATING\n  public updateCusClose() {\n    this.updateCus = false;\n  }\n\n  // ACTUAL UPDATE + FORM TO CHANGE WHAT WE NEED TO UPDATE - WHAT WE DONT CHANGE KEEPS DEFAULT VALUES ^^^\n  public updateCustomer() {\n    this.customer.firstName = this.updateCustomerForm.controls['fNameUpdate'].value;\n    this.customer.lastName = this.updateCustomerForm.controls['lNameUpdate'].value;\n    this.customer.customerEmail = this.updateCustomerForm.controls['customerUpEmail'].value;\n    this.customer.customerPassword = this.updateCustomerForm.controls['customerUpPassword'].value;\n    this.adminService.updateCustomer(sessionStorage.token, this.customer).subscribe((customer)=>{\n      this.snack.open(\"Customer updated successfully\", \"\", {duration:2000})\n      this.ngOnInit();\n      this.updateCus = false;\n    }, (err)=>{\n      console.log(err)\n      this.snack.open(err, \"\", {duration:2000})\n    });\n  }\n\n  // DELETE COMPANY BASED ON ID\n  public deleteCompany(id) {\n    this.adminService.deleteCompany(sessionStorage.token, id).subscribe((response)=>{\n      this.snack.open(response, \"\", {duration:2000})\n      this.ngOnInit();\n    }, (err)=>{\n      console.log(err);\n      this.snack.open(err, \"\", {duration:2000})\n    });\n  }\n\n  // DELETE CUSTOMER BASED ON ID\n  public deleteCustomer(id) {\n    this.adminService.deleteCustomer(sessionStorage.token, id).subscribe((response)=>{\n      this.snack.open(response, \"\", {duration:2000})\n      this.ngOnInit();\n    }, (err)=>{\n      console.log(err);\n      this.snack.open(err, \"\", {duration:2000})\n    });\n\n  }\n\n  // GET ONE COMPANY BASED ON ID - USES FIND ONE FORM\n  public getOneCompany() {\n    this.adminService.getOneCompany(sessionStorage.token, this.findOneCom.controls['companyId'].value).subscribe((company)=>{\n      this.oneCompany = company;\n      this.findOneCom.controls['companyId'].setValue(\"\");\n    }, (err)=>{\n      console.log(err)\n      this.findOneCom.controls['companyId'].setValue(\"\");\n    });\n  }\n\n  // GET ONE CUSTOMER BASED ON ID - USES FIND ONE FORM\n  public getOneCustomer() {\n    this.adminService.getOneCustomer(sessionStorage.token, this.findOneCus.controls['customerId'].value).subscribe((customer)=>{\n      this.oneCustomer = customer;\n      this.findOneCus.controls['customerId'].setValue(\"\");\n    }, (err)=>{\n      console.log(err)\n      this.findOneCus.controls['customerId'].setValue(\"\");\n    });\n  }\n\n  // IF WE WANT TO REFRESH THE LIST OF ALL COMPANIES WITHOUT RELOADING THE PAGE\n  public getAllCompanies() {\n    this.adminService.getAllCompanies(sessionStorage.token).subscribe((companies)=>{\n      this.companies = companies;\n    });\n  }\n\n  // IF WE WANT TO REFRESH THE LIST OF ALL CUSTOMER WITHOUT RELOADING THE PAGE\n  public getAllCustomers() {\n    this.adminService.getAllCustomers(sessionStorage.token).subscribe((customers)=>{\n      this.customers = customers;\n    });\n  }\n\n  public cComForm() {\n    return this.createCompanyForm.controls;\n  }\n\n  public cCusForm() {\n    return this.createCustomerForm.controls;\n  }\n\n  public uComForm() {\n    return this.updateCompanyForm.controls;\n  }\n\n  public uCusForm() {\n    return this.updateCustomerForm.controls;\n  }\n\n  public fCom() {\n    return this.findOneCom.controls;\n  }\n\n  public fCus() {\n    return this.findOneCus.controls;\n  }\n\n}\n","<div>\n\n    <form [formGroup]=\"createCompanyForm\"> <!-- CREATE NEW COMPANY FORM - EVERYTHING IS REQUIRED + EMAIL AND PASSWORD LENGTH (MAXIMUM 12) VALIDATION -->\n        <h1>Create company:</h1>\n        <mat-form-field>\n            <mat-label>Company name</mat-label>\n            <input type=\"text\" matInput placeholder=\"Enter company name...\" formControlName=\"name\"/>\n            <mat-error *ngIf=\"cComForm()['name'].errors?.required && cComForm()['name'].touched\">Company name is required!</mat-error>\n        </mat-form-field><br/>\n        <mat-form-field>\n            <mat-label>Company email</mat-label>\n            <input type=\"email\" matInput placeholder=\"Enter company email...\" formControlName=\"companyEmail\"/>\n            <mat-error *ngIf=\"cComForm()['companyEmail'].errors?.required && cComForm()['companyEmail'].touched\">Company email is required!</mat-error>\n            <mat-error *ngIf=\"cComForm()['companyEmail'].errors?.email && cComForm()['companyEmail'].touched\">Invalid email!</mat-error>\n        </mat-form-field><br/>\n        <mat-form-field>\n            <mat-label>Company password</mat-label>\n            <input type=\"text\" matInput placeholder=\"Enter company password...\" formControlName=\"companyPassword\"/>\n            <mat-error *ngIf=\"cComForm()['companyPassword'].errors?.required && cComForm()['companyPassword'].touched\">Company password is required!</mat-error>\n            <mat-error *ngIf=\"cComForm()['companyPassword'].errors?.maxlength && cComForm()['companyPassword'].touched\">Maximum password length is 12 characters!</mat-error>\n        </mat-form-field><br/><br/>\n        <button mat-raised-button (click)=\"addNewCompany()\" [disabled]=\"!createCompanyForm.valid\">Add Company</button>\n    </form><br/>\n\n    <form [formGroup]=\"createCustomerForm\"> <!-- CREATE NEW CUSTOMER FORM - EVERYTHING IS REQUIRED-->\n        <h1>Create customer:</h1>\n        <mat-form-field>\n            <mat-label>Customer first name</mat-label>\n            <input type=\"text\" matInput placeholder=\"Enter first name...\" formControlName=\"fName\"/>\n            <mat-error *ngIf=\"cCusForm()['fName'].errors?.required && cCusForm()['fName'].touched\">First name is required!</mat-error>\n        </mat-form-field><br/>\n        <mat-form-field>\n            <mat-label>Customer last name</mat-label>\n            <input type=\"text\" matInput placeholder=\"Enter last name...\" formControlName=\"lName\"/>\n            <mat-error *ngIf=\"cCusForm()['lName'].errors?.required && cCusForm()['lName'].touched\">Last name is required!</mat-error>\n        </mat-form-field><br/>\n        <mat-form-field>\n            <mat-label>Customer email</mat-label>\n            <input type=\"email\" matInput placeholder=\"Enter customer email...\" formControlName=\"customerEmail\"/>\n            <mat-error *ngIf=\"cCusForm()['customerEmail'].errors?.required && cCusForm()['customerEmail'].touched\">Customer email is required!</mat-error>\n            <mat-error *ngIf=\"cCusForm()['customerEmail'].errors?.email && cCusForm()['customerEmail'].touched\">Invalid email!</mat-error>\n        </mat-form-field><br/>\n        <mat-form-field>\n            <mat-label>Customer password</mat-label>\n            <input type=\"text\" matInput placeholder=\"Enter customer password...\" formControlName=\"customerPassword\"/>\n            <mat-error *ngIf=\"cCusForm()['customerPassword'].errors?.required && cCusForm()['customerPassword'].touched\">Customer password is required!</mat-error>\n            <mat-error *ngIf=\"cCusForm()['customerPassword'].errors?.maxlength && cCusForm()['customerPassword'].touched\">Maximum password length is 12 characters!</mat-error>\n        </mat-form-field><br/><br/>\n        <button mat-raised-button (click)=\"addNewCustomer()\" [disabled]=\"!createCustomerForm.valid\">Add Customer</button>\n    </form><br/>\n\n    <form [formGroup]=\"findOneCom\"> <!-- FORM TO FIND A SINGLE COMPANY OR CUSTOMER BASED ON ID -->\n        <h1>Find one company or customer:</h1>\n        <mat-form-field>\n            <mat-label>Company ID</mat-label>\n            <input type=\"number\" matInput placeholder=\"Enter company ID...\" formControlName=\"companyId\"/>\n            <mat-error *ngIf=\"fCom()['companyId'].errors?.required && fCom()['companyId'].touched\">Company ID required for a search!</mat-error>\n        </mat-form-field>\n        <button mat-raised-button (click)=\"getOneCompany()\" [disabled]=\"!findOneCom.valid\">🔍</button><span *ngIf=\"oneCompany\">ID: {{oneCompany.companyId}} | {{oneCompany.name}} | {{oneCompany.companyEmail}}, {{oneCompany.companyPassword}}</span>\n    </form><br/>\n\n    <form [formGroup]=\"findOneCus\">\n        <mat-form-field>\n            <mat-label>Customer ID</mat-label>\n            <input type=\"number\" matInput placeholder=\"Enter customer ID...\" formControlName=\"customerId\"/>\n            <mat-error *ngIf=\"fCus()['customerId'].errors?.required && fCus()['customerId'].touched\">Customer ID is required for a search!</mat-error>\n        </mat-form-field>\n        <button mat-raised-button (click)=\"getOneCustomer()\" [disabled]=\"!findOneCus.valid\">🔍</button><span *ngIf=\"oneCustomer\">ID: {{oneCustomer.customerId}} | {{oneCustomer.firstName}} {{oneCustomer.lastName}} | {{oneCustomer.customerEmail}}, {{oneCustomer.customerPassword}}</span>\n    </form><br/>\n\n    <h1>All companies:</h1><button mat-raised-button (click)=\"getAllCompanies()\">Refresh</button> <!-- REFRESH BUTTON EVEN IF WE USE NGONINIT -->\n    <ul>\n        <li *ngFor=\"let company of companies\">ID: {{company.companyId}} | {{company.name}} | {{company.companyEmail}}, {{company.companyPassword}}\n            <button mat-raised-button (click)=\"updateComOpen(company)\">Update</button> <!-- OPEN THE UPDATE FORM AND SEND DEFAULT VALUES  -->\n            <button mat-raised-button (click)=\"deleteCompany(company.companyId)\">Delete</button> <!-- DELETE COMPANY -->\n        </li>\n    </ul><br/>\n    <form [formGroup]=\"updateCompanyForm\" *ngIf=\"updateCom === true\"> <!-- UPDATE FORM ONLY OPENS WHEN YOU CLICK UPDATE ABOVE ^^^ -->\n        <mat-form-field>\n            <mat-label>Update name</mat-label>\n            <input type=\"text\" matInput placeholder=\"Update company name...\" formControlName=\"nameUpdate\"/>\n            <mat-error *ngIf=\"uComForm()['nameUpdate'].errors?.required && uComForm()['nameUpdate'].touched\">Company name is required!</mat-error>\n        </mat-form-field><br/>\n        <mat-form-field>\n            <mat-label>Update email</mat-label>\n            <input type=\"email\" matInput placeholder=\"Update company email...\" formControlName=\"companyUpEmail\"/>\n            <mat-error *ngIf=\"uComForm()['companyUpEmail'].errors?.required && uComForm()['companyUpEmail'].touched\">Company email is required!</mat-error>\n            <mat-error *ngIf=\"uComForm()['companyUpEmail'].errors?.email && uComForm()['companyUpEmail'].touched\">Invalid email!</mat-error>\n        </mat-form-field><br/>\n        <mat-form-field>\n            <mat-label>Update password</mat-label>\n            <input type=\"text\" matInput placeholder=\"Update company password...\" formControlName=\"companyUpPassword\"/>\n            <mat-error *ngIf=\"uComForm()['companyUpPassword'].errors?.required && uComForm()['companyUpPassword'].touched\">Company password is required!</mat-error>\n            <mat-error *ngIf=\"uComForm()['companyUpPassword'].errors?.maxlength && uComForm()['companyUpPassword'].touched\">Maximum password length is 12 characters!</mat-error>\n        </mat-form-field><br/><br/>\n        <button mat-raised-button (click)=\"updateCompany()\" [disabled]=\"!updateCompanyForm.valid\">Update</button><button mat-raised-button (click)=\"updateComClose()\">Cancel</button>\n    </form><br/>\n\n    <h1>All customers</h1><button mat-raised-button (click)=\"getAllCustomers()\">Refresh</button> <!-- REFRESH BUTTON EVEN IF WE USE NGONINIT -->\n    <ul>\n        <li *ngFor=\"let customer of customers\">ID: {{customer.customerId}} | {{customer.firstName}} {{customer.lastName}} | {{customer.customerEmail}}, {{customer.customerPassword}}\n            <button mat-raised-button (click)=\"updateCusOpen(customer)\">Update</button> <!-- OPEN THE UPDATE FORM AND SEND DEFAULT VALUES  -->\n            <button mat-raised-button (click)=\"deleteCustomer(customer.customerId)\">Delete</button> <!-- DELETE CUSTOMER -->\n        </li>\n    </ul><br/>\n    <form [formGroup]=\"updateCustomerForm\" *ngIf=\"updateCus === true\"> <!-- UPDATE FORM ONLY OPENS WHEN YOU CLICK UPDATE ABOVE ^^^ -->\n        <mat-form-field>\n            <mat-label>Update first name</mat-label>\n            <input type=\"text\" matInput placeholder=\"Update first name...\" formControlName=\"fNameUpdate\"/>\n            <mat-error *ngIf=\"uCusForm()['fNameUpdate'].errors?.required && uCusForm()['fNameUpdate'].touched\">First name is required!</mat-error>\n        </mat-form-field><br/>\n        <mat-form-field>\n            <mat-label>Update last name</mat-label>\n            <input type=\"text\" matInput placeholder=\"Update last name...\" formControlName=\"lNameUpdate\"/>\n            <mat-error *ngIf=\"uCusForm()['lNameUpdate'].errors?.required && uCusForm()['lNameUpdate'].touched\">Last name is required!</mat-error>\n        </mat-form-field><br/>\n        <mat-form-field>\n            <mat-label>Update email</mat-label>\n            <input type=\"email\" matInput placeholder=\"Update customer email...\" formControlName=\"customerUpEmail\"/>\n            <mat-error *ngIf=\"uCusForm()['customerUpEmail'].errors?.required && uCusForm()['customerUpEmail'].touched\">Customer email is required!</mat-error>\n            <mat-error *ngIf=\"uCusForm()['customerUpEmail'].errors?.email && uCusForm()['customerUpEmail'].touched\">Invalid email!</mat-error>\n        </mat-form-field><br/>\n        <mat-form-field>\n            <mat-label>Update password</mat-label>\n            <input type=\"text\" matInput placeholder=\"Update customer password...\" formControlName=\"customerUpPassword\"/>\n            <mat-error *ngIf=\"uCusForm()['customerUpPassword'].errors?.required && uCusForm()['customerUpPassword'].touched\">Customer password is required!</mat-error>\n            <mat-error *ngIf=\"uCusForm()['customerUpPassword'].errors?.maxlength && uCusForm()['customerUpPassword'].touched\">Maximum password length is 12 characters!</mat-error>\n        </mat-form-field><br/><br/>\n        <button mat-raised-button (click)=\"updateCustomer()\" [disabled]=\"!updateCustomerForm.valid\">Update</button><button mat-raised-button (click)=\"updateCusClose()\">Cancel</button>\n    </form><br/>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { CompanyService } from 'src/app/service/company.service';\nimport { Coupon } from 'src/app/model/coupon';\nimport { Company } from 'src/app/model/company';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-company',\n  templateUrl: './company.component.html',\n  styleUrls: ['./company.component.css']\n})\nexport class CompanyComponent implements OnInit {\n\n  // OUR FORMS\n  createCouponForm: FormGroup;\n  updateCouponForm: FormGroup;\n  findOneForm: FormGroup;\n  categoryFilter: FormControl;\n  priceFilter: FormControl;\n  maxPrice: FormControl;\n  categoryType: FormControl;\n\n  // OBJECTS WE USE\n  coupon: Coupon;\n  oneCoupon: Coupon;\n  updatedCoupon: Coupon;\n  company: Company;\n  coupons: Coupon[];\n  filterCoupons: Coupon[];\n\n  // BOOLEAN FOR OPENING UPDATE FORM\n  updateCou: Boolean = false;\n\n  constructor(private companyService:CompanyService, private fb:FormBuilder, private snack:MatSnackBar) { }\n\n  ngOnInit(): void {\n    this.createCouponForm = this.fb.group({\n      category: ['', Validators.required],\n      title: ['', [Validators.required, Validators.maxLength(100)]],\n      description: ['', [Validators.required, Validators.maxLength(200)]],\n      startDate: ['', Validators.required],\n      endDate: ['', Validators.required],\n      amount: ['', [Validators.required, Validators.min(1)]],\n      price: ['', [Validators.required, Validators.min(1)]],\n      image: ['', Validators.required]\n    });\n\n    this.updateCouponForm = this.fb.group({\n      categoryUp: ['', Validators.required],\n      titleUp: ['', [Validators.required, Validators.maxLength(100)]],\n      descriptionUp: ['', [Validators.required, Validators.maxLength(200)]],\n      startDateUp: ['', Validators.required],\n      endDateUp: ['', Validators.required],\n      amountUp: ['', [Validators.required, Validators.min(1)]],\n      priceUp: ['', [Validators.required, Validators.min(1)]],\n      imageUp: ['', Validators.required]\n    });\n\n    this.findOneForm = this.fb.group({\n      couponId: ['', Validators.required]\n    });\n\n    // CONTROLS FOR FILTERING COUPONS\n    this.categoryFilter = new FormControl(\"\");\n    this.priceFilter = new FormControl(\"\");\n    this.maxPrice = new FormControl(\"\");\n    this.categoryType = new FormControl(\"\");\n\n    // LOAD COUPONS ON FIRST VISIT\n    this.companyService.findAllCoupons(sessionStorage.token).subscribe((coupons)=>{\n      this.coupons = coupons;\n    });\n  }\n\n  // COUPON CREATION\n  public createCoupon() {\n    const coupon:Coupon = new Coupon(0, this.createCouponForm.controls['category'].value, this.createCouponForm.controls['title'].value, this.createCouponForm.controls['description'].value,\n    this.createCouponForm.controls['startDate'].value, this.createCouponForm.controls['endDate'].value, this.createCouponForm.controls['amount'].value,\n    this.createCouponForm.controls['price'].value, this.createCouponForm.controls['image'].value);\n    this.companyService.createCoupon(sessionStorage.token, coupon).subscribe((coupon)=>{\n      this.snack.open(\"Coupon created sucessfully, ID: \" + coupon.couponId, \"\", {duration:2000})\n      this.ngOnInit();\n    }, (err)=>{\n      console.log(err);\n      this.snack.open(err, \"\", {duration:2000})\n    });\n  }\n\n  // SEND COUPON TO UPDATE - SEND WITH COUPON DEFAULT VALUES THEN CHANGE WHAT WE NEED WHILE SAVING THE REST AS IS\n  public openCouponUpdate(coupon:Coupon) {\n    this.updateCou = true;\n    this.coupon = coupon;\n    this.updateCouponForm.controls['categoryUp'].setValue(coupon.category);\n    this.updateCouponForm.controls['titleUp'].setValue(coupon.title);\n    this.updateCouponForm.controls['descriptionUp'].setValue(coupon.description);\n    this.updateCouponForm.controls['startDateUp'].setValue(coupon.startDate);\n    this.updateCouponForm.controls['endDateUp'].setValue(coupon.endDate);\n    this.updateCouponForm.controls['amountUp'].setValue(coupon.amount);\n    this.updateCouponForm.controls['priceUp'].setValue(coupon.price);\n    this.updateCouponForm.controls['imageUp'].setValue(coupon.image);\n  }\n\n  // CLOSE UPDATE FORM WITHOUT UPDATING\n  public closeCouponUpdate() {\n    this.updateCou = false;\n  }\n\n  // ACTUAL UPDATE + FORM TO CHANGE WHAT WE NEED TO UPDATE - WHAT WE DONT CHANGE KEEPS DEFAULT VALUES ^^^\n  public updateCoupon() {\n    this.coupon.category = this.updateCouponForm.controls['categoryUp'].value;\n    this.coupon.title = this.updateCouponForm.controls['titleUp'].value;\n    this.coupon.description = this.updateCouponForm.controls['descriptionUp'].value;\n    this.coupon.startDate = this.updateCouponForm.controls['startDateUp'].value;\n    this.coupon.endDate = this.updateCouponForm.controls['endDateUp'].value;\n    this.coupon.amount = this.updateCouponForm.controls['amountUp'].value;\n    this.coupon.price = this.updateCouponForm.controls['priceUp'].value;\n    this.coupon.image = this.updateCouponForm.controls['imageUp'].value;\n    this.companyService.updateCoupon(sessionStorage.token, this.coupon).subscribe((result)=>{\n      this.snack.open(\"Coupon updated sucessfully\", \"\", {duration:2000})\n      this.ngOnInit();\n      this.updateCou = false;\n    }, (err)=>{\n      console.log(err)\n      this.snack.open(err, \"\", {duration:2000})\n    });\n  }\n\n  // DELETE COUPON BASED ON ID\n  public deleteCoupon(id) {\n    this.companyService.deleteCoupon(sessionStorage.token, id).subscribe((response)=>{\n      this.snack.open(response, \"\", {duration:2000})\n      this.ngOnInit();\n    }, (err)=>{\n      console.log(err);\n      this.snack.open(err, \"\", {duration:2000})\n    });\n  }\n\n  public getOneCoupon() {\n    this.companyService.findOneCoupon(sessionStorage.token, this.findOneForm.controls['couponId'].value).subscribe((coupon)=>{\n      this.oneCoupon = coupon;\n      this.findOneForm.controls['couponId'].setValue(\"\");\n    }, (err)=>{\n      this.findOneForm.controls['couponId'].setValue(\"\");\n      console.log(err)\n    });\n  }\n\n  public findAllCoupons() {\n    this.companyService.findAllCoupons(sessionStorage.token).subscribe((coupons)=>{\n      this.coupons = coupons;\n    });\n  }\n\n  // FILTER BY MAX PRICE \n  public getCouponsByMaxPrice() {\n    this.companyService.findAllCouponsByPrice(sessionStorage.token, this.maxPrice.value).subscribe((result)=>{\n      this.filterCoupons = result;\n    });\n  }\n\n  // FILTER BY CATEGORY\n  public getCouponsByCategory() {\n    this.companyService.findAllCouponsByCategory(sessionStorage.token, this.categoryType.value).subscribe((result)=>{\n      this.filterCoupons = result;\n    });\n  }\n\n  // SHOW LOGGED IN COMPANY DETAILS\n  public showDetails() {\n    this.companyService.companyDetails(sessionStorage.token).subscribe((company)=>{\n      this.company = company;\n    }, (err)=>{\n      console.log(err)\n    });\n  }\n\n  public cCouForm() {\n    return this.createCouponForm.controls;\n  }\n\n  public uCouForm() {\n    return this.updateCouponForm.controls;\n  }\n\n}\n","<div>\n\n    <span>\n     <button mat-raised-button (click)=\"showDetails()\">Your information</button>\n     <span *ngIf=\"company\">Your ID: {{company.companyId}} | Company name: {{company.name}} | Email: {{company.companyEmail}} | Password: {{company.companyPassword}}</span>\n    </span><br/><br/>\n\n    <form [formGroup]=\"createCouponForm\">\n        <h1>Create coupon:</h1>\n        <mat-form-field>\n          <mat-select formControlName=\"category\" placeholder=\"Category\">\n              <mat-option value=\"Restaurants\">Restaurants</mat-option>\n              <mat-option value=\"Vacation\">Vacation</mat-option>\n              <mat-option value=\"Electronics\">Electronics</mat-option>\n              <mat-option value=\"Clothing\">Clothing</mat-option>\n              <mat-option value=\"Entertainment\">Entertainment</mat-option>\n          </mat-select>\n          <mat-error *ngIf=\"cCouForm()['category'].errors?.required && cCouForm()['category'].touched\">Coupon category is required!</mat-error>\n        </mat-form-field><br/>\n        <mat-form-field>\n            <mat-label>Coupon title</mat-label>\n            <input type=\"text\" matInput placeholder=\"Enter coupon title...\" formControlName=\"title\"/>\n            <mat-error *ngIf=\"cCouForm()['title'].errors?.required && cCouForm()['title'].touched\">Coupon title is required!</mat-error>\n            <mat-error *ngIf=\"cCouForm()['title'].errors?.maxlength && cCouForm()['title'].touched\">Maximum character length is 100!</mat-error>\n        </mat-form-field><br/>\n        <mat-form-field>\n            <mat-label>Coupon description</mat-label>\n            <input type=\"text\" matInput placeholder=\"Enter coupon description...\" formControlName=\"description\"/>\n            <mat-error *ngIf=\"cCouForm()['description'].errors?.required && cCouForm()['description'].touched\">Coupon description is required!</mat-error>\n            <mat-error *ngIf=\"cCouForm()['description'].errors?.maxlength && cCouForm()['description'].touched\">Maximum character length is 200!</mat-error>\n        </mat-form-field><br/>\n        <mat-form-field>\n            <mat-label>Coupon start date</mat-label>\n            <input type=\"date\" matInput placeholder=\"Enter coupon start date...\" formControlName=\"startDate\"/>\n            <mat-error *ngIf=\"cCouForm()['startDate'].errors?.required && cCouForm()['startDate'].touched\">Coupon start date is required!</mat-error>\n        </mat-form-field><br/>\n        <mat-form-field>\n            <mat-label>Coupon end date</mat-label>\n            <input type=\"date\" matInput placeholder=\"Enter coupon end date...\" formControlName=\"endDate\"/>\n            <mat-error *ngIf=\"cCouForm()['endDate'].errors?.required && cCouForm()['endDate'].touched\">Coupon end date is required!</mat-error>\n        </mat-form-field><br/>\n        <mat-form-field>\n            <mat-label>Coupon amount</mat-label>\n            <input type=\"number\" matInput placeholder=\"Enter coupon amount..\" formControlName=\"amount\"/>\n            <mat-error *ngIf=\"cCouForm()['amount'].errors?.required && cCouForm()['amount'].touched\">Coupon amount is required!</mat-error>\n            <mat-error *ngIf=\"cCouForm()['amount'].errors?.min && cCouForm()['amount'].touched\">Minimum amount must be above 0!</mat-error>\n        </mat-form-field><br/>\n        <mat-form-field>\n            <mat-label>Coupon price</mat-label>\n            <input type=\"number\" matInput placeholder=\"Enter coupon price..\" formControlName=\"price\"/>\n            <mat-error *ngIf=\"cCouForm()['price'].errors?.required && cCouForm()['price'].touched\">Coupon price is required!</mat-error>\n            <mat-error *ngIf=\"cCouForm()['price'].errors?.min && cCouForm()['price'].touched\">Minimum price must be above 0!</mat-error>\n        </mat-form-field><br/>\n        <mat-form-field>\n            <mat-label>Coupon image</mat-label>\n            <input type=\"text\" matInput placeholder=\"Enter coupon image..\" formControlName=\"image\"/>\n            <mat-error *ngIf=\"cCouForm()['image'].errors?.required && cCouForm()['image'].touched\">Coupon image is required!</mat-error>\n        </mat-form-field><br/><br/>\n        <button mat-raised-button (click)=\"createCoupon()\" [disabled]=\"!createCouponForm.valid\">Add Coupon</button>\n    </form><br/>\n\n    <form [formGroup]=\"findOneForm\">\n        <h1>Find one coupon:</h1>\n        <mat-form-field>\n            <mat-label>Coupon ID</mat-label>\n            <input type=\"number\" matInput placeholder=\"Enter coupon ID...\" formControlName=\"couponId\"/>\n            <mat-error>Coupon ID is required for a search!</mat-error>\n        </mat-form-field>\n        <button mat-raised-button (click)=\"getOneCoupon()\" [disabled]=\"!findOneForm.valid\">🔍</button><span *ngIf=\"oneCoupon\">\n            ID: {{oneCoupon.couponId}} |  CAT: {{oneCoupon.category}}, TITLE: {{oneCoupon.title}}, DESC: {{oneCoupon.description}} | {{oneCoupon.startDate}} - {{oneCoupon.endDate}} | AMT: {{oneCoupon.amount}}, PRICE: {{oneCoupon.price}} | {{oneCoupon.image}}\n        </span>\n    </form><br/>\n\n    <h1>All of your coupons:</h1><input type=\"button\" value=\"Refresh\" (click)=\"findAllCoupons()\"/>\n    <ul>\n        <li *ngFor=\"let coupon of coupons\">ID: {{coupon.couponId}} |  CAT: {{coupon.category}}, TITLE: {{coupon.title}}, DESC: {{coupon.description}} | {{coupon.startDate}} - {{coupon.endDate}} | AMT: {{coupon.amount}}, PRICE: {{coupon.price}} | {{coupon.image}}\n            <button mat-raised-button (click)=\"openCouponUpdate(coupon)\">Update</button><button mat-raised-button (click)=\"deleteCoupon(coupon.couponId)\">Delete</button>\n        </li>\n    </ul><br/>\n    <form [formGroup]=\"updateCouponForm\" *ngIf=\"updateCou === true\">\n        <mat-form-field>\n            <mat-select formControlName=\"categoryUp\" placeholder=\"Category\">\n                <mat-option value=\"Restaurants\">Restaurants</mat-option>\n                <mat-option value=\"Vacation\">Vacation</mat-option>\n                <mat-option value=\"Electronics\">Electronics</mat-option>\n                <mat-option value=\"Clothing\">Clothing</mat-option>\n                <mat-option value=\"Entertainment\">Entertainment</mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"uCouForm()['categoryUp'].errors?.required && uCouForm()['categoryUp'].touched\">Coupon category is required!</mat-error>\n          </mat-form-field><br/>\n          <mat-form-field>\n              <mat-label>Update title</mat-label>\n              <input type=\"text\" matInput placeholder=\"Update coupon title...\" formControlName=\"titleUp\"/>\n              <mat-error *ngIf=\"uCouForm()['titleUp'].errors?.required && uCouForm()['titleUp'].touched\">Coupon title is required!</mat-error>\n              <mat-error *ngIf=\"uCouForm()['titleUp'].errors?.maxlength && uCouForm()['titleUp'].touched\">Maximum character length is 100!</mat-error>\n          </mat-form-field><br/>\n          <mat-form-field>\n              <mat-label>Update description</mat-label>\n              <input type=\"text\" matInput placeholder=\"Update coupon description...\" formControlName=\"descriptionUp\"/>\n              <mat-error *ngIf=\"uCouForm()['descriptionUp'].errors?.required && uCouForm()['descriptionUp'].touched\">Coupon description is required!</mat-error>\n              <mat-error *ngIf=\"uCouForm()['descriptionUp'].errors?.maxlength && uCouForm()['descriptionUp'].touched\">Maximum character length is 200!</mat-error>\n          </mat-form-field><br/>\n          <mat-form-field>\n              <mat-label>Update start date</mat-label>\n              <input type=\"date\" matInput placeholder=\"Update coupon start date...\" formControlName=\"startDateUp\"/>\n              <mat-error *ngIf=\"uCouForm()['startDateUp'].errors?.required && uCouForm()['startDateUp'].touched\">Coupon start date is required!</mat-error>\n          </mat-form-field><br/>\n          <mat-form-field>\n              <mat-label>Update end date</mat-label>\n              <input type=\"date\" matInput placeholder=\"Update coupon end date...\" formControlName=\"endDateUp\"/>\n              <mat-error *ngIf=\"uCouForm()['endDateUp'].errors?.required && uCouForm()['endDateUp'].touched\">Coupon end date is required!</mat-error>\n          </mat-form-field><br/>\n          <mat-form-field>\n              <mat-label>Update amount</mat-label>\n              <input type=\"number\" matInput placeholder=\"Update coupon amount..\" formControlName=\"amountUp\"/>\n              <mat-error *ngIf=\"uCouForm()['amountUp'].errors?.required && uCouForm()['amountUp'].touched\">Coupon amount is required!</mat-error>\n              <mat-error *ngIf=\"uCouForm()['amountUp'].errors?.min && uCouForm()['amountUp'].touched\">Minimum amount must be above 0!</mat-error>\n          </mat-form-field><br/>\n          <mat-form-field>\n              <mat-label>Update price</mat-label>\n              <input type=\"number\" matInput placeholder=\"Update coupon price..\" formControlName=\"priceUp\"/>\n              <mat-error *ngIf=\"uCouForm()['priceUp'].errors?.required && uCouForm()['priceUp'].touched\">Coupon price is required!</mat-error>\n              <mat-error *ngIf=\"uCouForm()['priceUp'].errors?.min && uCouForm()['priceUp'].touched\">Minimum price must be above 0!</mat-error>\n          </mat-form-field><br/>\n          <mat-form-field>\n              <mat-label>Update image</mat-label>\n              <input type=\"text\" matInput placeholder=\"Update coupon image..\" formControlName=\"imageUp\"/>\n              <mat-error *ngIf=\"uCouForm()['imageUp'].errors?.required && uCouForm()['imageUp'].touched\">Coupon image is required!</mat-error>\n          </mat-form-field><br/><br/>\n          <button mat-raised-button (click)=\"updateCoupon()\" [disabled]=\"!updateCouponForm.valid\">Update</button><button mat-raised-button (click)=\"closeCouponUpdate()\">Cancel</button>\n    </form><br/>\n    \n    <h1>Filter coupons:</h1>\n    <mat-slide-toggle [formControl]=\"priceFilter\">Max Price</mat-slide-toggle><br/>\n    <mat-slide-toggle [formControl]=\"categoryFilter\">Category</mat-slide-toggle><br/>\n\n    <div *ngIf=\"priceFilter.value\">\n        <mat-form-field>\n            <input type=\"number\" matInput placeholder=\"Enter maximum price\" [formControl]=\"maxPrice\"/>\n        </mat-form-field>\n        <button mat-raised-button (click)=\"getCouponsByMaxPrice()\">Filter</button>\n    </div><br/>\n    \n    <div *ngIf=\"categoryFilter.value\">\n        <mat-form-field>\n            <mat-select [formControl]=\"categoryType\" placeholder=\"Choose category\">\n                <mat-option value=\"Restaurants\">Restaurants</mat-option>\n                <mat-option value=\"Vacation\">Vacation</mat-option>\n                <mat-option value=\"Electronics\">Electronics</mat-option>\n                <mat-option value=\"Clothing\">Clothing</mat-option>\n                <mat-option value=\"Entertainment\">Entertainment</mat-option>\n            </mat-select>\n          </mat-form-field>\n        <button mat-raised-button (click)=\"getCouponsByCategory()\">Filter</button>\n    </div><br/>\n\n    <ul *ngIf=\"filterCoupons\">\n        <li *ngFor=\"let fCoupon of filterCoupons\">ID: {{fCoupon.couponId}} |  CAT: {{fCoupon.category}}, TITLE: {{fCoupon.title}}, DESC: {{fCoupon.description}} | {{fCoupon.startDate}} - {{fCoupon.endDate}} | AMT: {{fCoupon.amount}}, PRICE: {{fCoupon.price}} | {{fCoupon.image}}</li>\n    </ul><br/>\n\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Customer } from 'src/app/model/customer';\nimport { CustomerService } from 'src/app/service/customer.service';\nimport { Coupon } from 'src/app/model/coupon';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-customer',\n  templateUrl: './customer.component.html',\n  styleUrls: ['./customer.component.css']\n})\nexport class CustomerComponent implements OnInit {\n\n  customer: Customer;\n  coupons: Coupon[];\n  filterCoupons: Coupon[];\n\n  categoryFilter: FormControl;\n  priceFilter: FormControl;\n  maxPrice: FormControl;\n  categoryType: FormControl;\n\n  constructor(private customerService:CustomerService) { }\n\n  ngOnInit(): void {\n    this.customerService.findCustomerCoupons(sessionStorage.token).subscribe((coupons)=>{\n      this.coupons = coupons;\n    });\n\n    this.categoryFilter = new FormControl(\"\");\n    this.priceFilter = new FormControl(\"\");\n    this.maxPrice = new FormControl(\"\");\n    this.categoryType = new FormControl(\"\");\n  }\n\n  // FILTER BY MAX PRICE\n  public getCouponsByMaxPrice() {\n    this.customerService.findCustomerCouponsByPrice(sessionStorage.token, this.maxPrice.value).subscribe((result)=>{\n      this.filterCoupons = result;\n    });\n  }\n\n  // FILTER BY CATEGORY\n  public getCouponsByCategory() {\n    this.customerService.findCustomerCouponsByCategory(sessionStorage.token, this.categoryType.value).subscribe((result)=>{\n      this.filterCoupons = result;\n    });\n  }\n\n  public showDetails() {\n    this.customerService.customerDetails(sessionStorage.token).subscribe((customer)=>{\n      this.customer = customer\n    }, (err)=>{\n      console.log(err)\n    });\n  }\n\n}\n","<div>\n\n    <span>\n     <button mat-raised-button (click)=\"showDetails()\">Your information</button>\n     <span *ngIf=\"customer\">Your ID: {{customer.customerId}} | First name: {{customer.firstName}} | Last name: {{customer.lastName}} | Email: {{customer.customerEmail}} | Password: {{customer.customerPassword}}</span>\n    </span><br/><br/>\n\n    <h1>All of your purchased coupons:</h1>\n    <ul>\n        <li *ngFor=\"let coupon of coupons\">ID: {{coupon.couponId}} |  CAT: {{coupon.category}}, TITLE: {{coupon.title}}, DESC: {{coupon.description}} | {{coupon.startDate}} - {{coupon.endDate}} | AMT: {{coupon.amount}}, PRICE: {{coupon.price}} | {{coupon.image}}</li>\n    </ul><br/>\n\n    <h1>Filter Your coupons:</h1>\n    <mat-slide-toggle [formControl]=\"priceFilter\">Max Price</mat-slide-toggle><br/>\n    <mat-slide-toggle [formControl]=\"categoryFilter\">Category</mat-slide-toggle><br/>\n\n    <div *ngIf=\"priceFilter.value\">\n        <mat-form-field>\n            <input type=\"number\" matInput placeholder=\"Enter maximum price\" [formControl]=\"maxPrice\"/>\n        </mat-form-field>\n        <button mat-raised-button (click)=\"getCouponsByMaxPrice()\">Filter</button>\n    </div><br/>\n    \n    <div *ngIf=\"categoryFilter.value\">\n        <mat-form-field>\n            <mat-select [formControl]=\"categoryType\" placeholder=\"Choose category\">\n                <mat-option value=\"Restaurants\">Restaurants</mat-option>\n                <mat-option value=\"Vacation\">Vacation</mat-option>\n                <mat-option value=\"Electronics\">Electronics</mat-option>\n                <mat-option value=\"Clothing\">Clothing</mat-option>\n                <mat-option value=\"Entertainment\">Entertainment</mat-option>\n            </mat-select>\n          </mat-form-field>\n        <button mat-raised-button (click)=\"getCouponsByCategory()\">Filter</button>\n    </div><br/>\n\n    <ul *ngIf=\"filterCoupons\">\n        <li *ngFor=\"let fCoupon of filterCoupons\">ID: {{fCoupon.couponId}} |  CAT: {{fCoupon.category}}, TITLE: {{fCoupon.title}}, DESC: {{fCoupon.description}} | {{fCoupon.startDate}} - {{fCoupon.endDate}} | AMT: {{fCoupon.amount}}, PRICE: {{fCoupon.price}} | {{fCoupon.image}}</li>\n    </ul><br/>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Coupon } from 'src/app/model/coupon';\nimport { CouponLoaderService } from 'src/app/service/coupon-load.service';\nimport { LoginService } from 'src/app/service/login.service';\nimport { CustomerService } from 'src/app/service/customer.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-homepage',\n  templateUrl: './homepage.component.html',\n  styleUrls: ['./homepage.component.css']\n})\nexport class HomepageComponent implements OnInit {\n\n  coupons:Coupon[];\n  toBuyCoupon: Coupon;\n  userType: string = sessionStorage.getItem('userType');\n  customer: boolean = false;\n\n  constructor(private coupService:CouponLoaderService, private loginService:LoginService, private customerService:CustomerService, private snack:MatSnackBar) { }\n\n  ngOnInit(): void {\n    this.coupService.getAllCoupons().subscribe((coupons)=>{\n      this.coupons = coupons\n    });\n\n    this.checkUser()\n  }\n\n  public purchaseCoupon(coupon) {\n    this.toBuyCoupon = coupon\n    this.customerService.purchaseCoupon(sessionStorage.token, coupon).subscribe((coupon)=>{\n      this.snack.open(\"Coupon purchased successfully\", \"\", {duration:2000})\n    }, (err)=>{\n      console.log(err)\n      this.snack.open(err, \"\", {duration:2000})\n    });\n  }\n\n  public checkUser() {\n    if (this.userType === 'customer') {\n    this.customer = true;\n    } else {\n      this.customer = false;\n    }\n  }\n}\n","<div>\n\n    <h1>Our totally legit coupon stock:</h1><br/>\n\n    <ul>\n        <li *ngFor=\"let coupon of coupons\">ID: {{coupon.couponId}} , TITLE: {{coupon.title}}, DESC:  {{coupon.description}} , {{coupon.startDate}} - {{coupon.endDate}} , Amount: {{coupon.amount}}, price: {{coupon.price}} , image: {{coupon.image}},  Category: {{coupon.category}}\n            <button mat-raised-button (click)=\"purchaseCoupon(coupon)\" *ngIf=\"customer === true\">Purchase 🛒</button><br/><br/>\n        </li>\n    </ul>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { LoginService } from 'src/app/service/login.service';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n  userType: string = sessionStorage.getItem('userType');\n\n  constructor(private loginService:LoginService, private fb:FormBuilder, private snack:MatSnackBar) { }\n\n  ngOnInit(): void {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required],\n      clientType: ['', Validators.required]\n    });\n    \n  }\n\n  public login() {\n    this.loginService.login(this.loginForm.controls['email'].value, this.loginForm.controls['password'].value, this.loginForm.controls['clientType'].value).subscribe((tokenFromServer)=>{\n      sessionStorage.token = tokenFromServer;\n      switch (this.loginForm.controls['clientType'].value) {\n        case 'Administrator':\n          sessionStorage.setItem('userType', 'admin');\n          break;\n      \n        case 'Company':\n          sessionStorage.setItem('userType', 'company');\n          break;\n  \n        case 'Customer':\n          sessionStorage.setItem('userType', 'customer');\n          break;\n\n        default:\n          break;\n      }\n      this.snack.open(\"Login successful!\", \"\", {duration:2000})\n      window.location.reload()\n    }, (err)=>{\n      console.log(err)\n      this.snack.open(\"Incorrect email, password or client type!\", \"\", {duration:2000});\n    });\n  }\n\n  public logout() {\n    this.loginService.logout(sessionStorage.token).subscribe((res)=>{\n      sessionStorage.removeItem(\"token\")\n      sessionStorage.removeItem(\"userType\")\n      this.snack.open(res, \"\", {duration:2000})\n      window.location.reload()\n    }, (err)=>{\n      console.log(err)\n    });\n  }\n\n  public getUserType() {\n    return this.userType;\n  }\n\n  public fc() {\n    return this.loginForm.controls;\n  }\n\n}\n","<div>\n\n    <h1>Login</h1><br/>\n\n    <form [formGroup]=\"loginForm\"> \n\n        <mat-form-field>\n            <mat-label>Email</mat-label>\n            <input type=\"email\" matInput placeholder=\"Enter email\" formControlName=\"email\"/>\n            <mat-error *ngIf=\"fc()['email'].errors?.required && fc()['email'].touched\">Email is required!</mat-error>\n            <mat-error *ngIf=\"fc()['email'].errors?.email && fc()['email'].touched\">Not a valid email!</mat-error> \n        </mat-form-field><br/>\n\n        <mat-form-field>\n            <mat-label>Password</mat-label>\n            <input type=\"password\" matInput placeholder=\"Enter password\" formControlName=\"password\"/>\n            <mat-error *ngIf=\"fc()['password'].errors?.required && fc()['password'].touched\">Password is required!</mat-error> \n        </mat-form-field><br/>\n\n        <mat-form-field>\n            <mat-select formControlName=\"clientType\" placeholder=\"ClientType\">\n                <mat-option value=\"Administrator\">Administrator</mat-option>\n                <mat-option value=\"Company\">Company</mat-option>\n                <mat-option value=\"Customer\">Customer</mat-option>\n            </mat-select>\n            <mat-error *ngIf=\"fc()['clientType'].errors?.required\">Select a ClientType!</mat-error> \n        </mat-form-field><br/>\n\n        <button mat-button (click)=\"login()\" [disabled]=\"!loginForm.valid\">Login</button>\n        <button mat-button (click)=\"logout()\">Logout</button>\n        \n    </form><br/><br/>\n\n</div>\n","export class Company {\n\n    constructor(public companyId:number, public name:string, public companyEmail:string, public companyPassword:string){}\n\n}\n","import { CategoryType } from '../enum/category-type.enum';\nimport { Company } from './company';\n\nexport class Coupon {\n\n    constructor(public couponId:number, public category:CategoryType, public title:string, public description:string, public startDate:Date, public endDate:Date,\n         public amount:number, public price:number, public image:string){}\n\n}\n","export class Customer {\n\n    constructor(public customerId:number, public firstName:string, public lastName:string, public customerEmail:string, public customerPassword:string){}\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Company } from '../model/company';\nimport { Customer } from '../model/customer';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n\n  constructor(private client:HttpClient) { }\n\n  createCompany(token:string, company:Company){\n    return this.client.post<Company>(\"http://localhost:8080/admin/create/company/\" + token, company);\n  }\n\n  updateCompany(token:string, company:Company){\n    return this.client.put<Company>(\"http://localhost:8080/admin/update/company/\" + token, company);\n  }\n\n  deleteCompany(token:string, id:number){\n    return this.client.delete(\"http://localhost:8080/admin/delete/company/\" + id + \"/\" + token, {responseType: 'text'});\n  }\n\n  getAllCompanies(token:string){\n    return this.client.get<Company[]>(\"http://localhost:8080/admin/find/all/companies/\" + token);\n  }\n\n  getOneCompany(token:string, id:number){\n    return this.client.get<Company>(\"http://localhost:8080/admin/find/one/company/\" + id + \"/\" + token);\n  }\n\n  createCustomer(token:string, customer:Customer){\n    return this.client.post<Customer>(\"http://localhost:8080/admin/create/customer/\" + token, customer);\n  }\n\n  updateCustomer(token:string, customer:Customer){\n    return this.client.put<Customer>(\"http://localhost:8080/admin/update/customer/\" + token, customer);\n  }\n\n  deleteCustomer(token:string, id:number){\n    return this.client.delete(\"http://localhost:8080/admin/delete/customer/\" + id + \"/\" + token, {responseType: 'text'});\n  }\n\n  getAllCustomers(token:string){\n    return this.client.get<Customer[]>(\"http://localhost:8080/admin/find/all/customers/\" + token);\n  }\n\n  getOneCustomer(token:string, id:number){\n    return this.client.get<Customer>(\"http://localhost:8080/admin/find/one/customer/\" + id + \"/\" + token);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Coupon } from '../model/coupon';\nimport { CategoryType } from '../enum/category-type.enum';\nimport { Company } from '../model/company';\nimport { Session } from 'protractor';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CompanyService {\n\n  constructor(private client:HttpClient) { }\n\n  createCoupon(token:string, coupon:Coupon){\n    return this.client.post<Coupon>(\"http://localhost:8080/company/create/coupon/\" + token, coupon);\n  }\n\n  updateCoupon(token:string, coupon:Coupon){\n    return this.client.put<Coupon>(\"http://localhost:8080/company/update/coupon/\" + token, coupon,);\n  }\n\n  deleteCoupon(token:string, id:number){\n    return this.client.delete(\"http://localhost:8080/company/delete/coupon/\" + id + \"/\" + token, {responseType: 'text'});\n  }\n\n  findAllCoupons(token:string){\n    return this.client.get<Coupon[]>(\"http://localhost:8080/company/find/all/coupons/\" + token);\n  }\n\n  findOneCoupon(token:string, id:number){\n    return this.client.get<Coupon>(\"http://localhost:8080/company/find/one/coupon/\" + id + \"/\" + token);\n  }\n\n  findAllCouponsByCategory(token:string, category:CategoryType){\n    return this.client.get<Coupon[]>(\"http://localhost:8080/company/find/all/coupons/category/\" + category + \"/\" + token);\n  }\n\n  findAllCouponsByPrice(token:string, price:number){\n    return this.client.get<Coupon[]>(\"http://localhost:8080/company/find/all/coupons/price/\" + price + \"/\" + token);\n  }\n\n  companyDetails(token:string){\n    return this.client.get<Company>(\"http://localhost:8080/company/info/\" + token);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Coupon } from '../model/coupon';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CouponLoaderService {\n\n  constructor(private client:HttpClient) { }\n\n  getAllCoupons() {\n    return this.client.get<Coupon[]>(\"http://localhost:8080/show\");\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Coupon } from '../model/coupon';\nimport { CategoryType } from '../enum/category-type.enum';\nimport { Customer } from '../model/customer';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomerService {\n\n  constructor(private client:HttpClient) { }\n\n  purchaseCoupon(token:string, coupon:Coupon){\n    return this.client.post<Coupon>(\"http://localhost:8080/customer/purchase/\" + token, coupon);\n  }\n\n  findCustomerCoupons(token:string){\n    return this.client.get<Coupon[]>(\"http://localhost:8080/customer/find/all/coupons/\" + token);\n  }\n\n  findCustomerCouponsByCategory(token:string, category:CategoryType){\n    return this.client.get<Coupon[]>(\"http://localhost:8080/customer/find/all/coupons/category/\" + category + \"/\" + token);\n  }\n\n  findCustomerCouponsByPrice(token:string, price:number){\n    return this.client.get<Coupon[]>(\"http://localhost:8080/customer/find/all/coupons/price/\" + price + \"/\" + token);\n  }\n\n  customerDetails(token:string){\n    return this.client.get<Customer>(\"http://localhost:8080/customer/info/\" + token);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { ClientType } from '../enum/client-type.enum';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  constructor(private client:HttpClient) { }\n\n  login(email:string, password:string, clientType:ClientType){\n    return this.client.post(\"http://localhost:8080/login/\" + email + \"/\" + password + \"/\" + clientType, null, {responseType:'text'});\n  }\n\n  logout(token:string){\n    return this.client.post(\"http://localhost:8080/logout/\" + token, null, {responseType: 'text'});\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}